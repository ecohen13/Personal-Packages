mu2 <- param[3]
sigma1 <- param[4]
sigma2 <- param[5]
e.step <- p*dnorm(Y, mu1, sqrt(sigma1))/
(p*dnorm(Y, mu1, sqrt(sigma1)) + p*dnorm(Y, mu2, sqrt(sigma2)))
param[1] <- e.step
param[2] <- mu1 <- sum(e.step * Y) / sum(e.step) #mu1
param[3] <- mu2 <- sum((1-e.step)*Y) / sum(1 - e.step) #mu2
param[4] <- sum(e.step*(Y-mu1)^2)/sum(e.step) #sigma1
param[5] <- sum((1-e.step)*(Y-mu2)^2)/sum(1-e.step) #sigma2
return(param)
}
em.step
em.step(param=param, Y = Y)
em.iteration<-function(Y, param, n=10) {
for (i in (1:n)) {
param <- em.step(Y,param)
}
param
}
#EM
em.iteration
param <- c(0.5,40,90,16,16)
param <- em.iteration(Y,param,25)
param
#check for convergence
param <- em.step(Y,param)
param
par(mar=c(2,2,1,1),mgp=c(1,0.5,0),cex=0.7,lwd=0.5,las=1)
hist(Y,breaks=seq(40,100,3),xlab="Waiting time between eruptions (min)",
xlim=c(40,100),
main="",axes=F)
axis(1,seq(40,100,6),pos=0)
axis(2,seq(0,35,5),pos=40,las=1)
x<-seq(40,100,0.1)
y<-param[1]*dnorm(x,param[2],sqrt(param[4]))+
(1-param[1])*dnorm(x,param[3],sqrt(param[5]))
lines(x,y*3*length(Y))
#dev.off()
#
#Bivariate mixture model
#
param <- c(0.5,40,90,16,16)
#
#25 iterations of EM algorithm
#
param <- em.iteration(Y,param,25)
param
#check for convergence
param <- em.step(Y,param)
param
#
#plot histogram with fitted distribution
#
#postscript("geyserfit.eps",width=5,height=3,onefile=F)
par(mar=c(2,2,1,1),mgp=c(1,0.5,0),cex=0.7,lwd=0.5,las=1)
hist(Y,breaks=seq(40,100,3),xlab="Waiting time between eruptions (min)",
xlim=c(40,100),
main="",axes=F)
axis(1,seq(40,100,6),pos=0)
axis(2,seq(0,35,5),pos=40,las=1)
x<-seq(40,100,0.1)
y<-param[1]*dnorm(x,param[2],sqrt(param[4]))+
(1-param[1])*dnorm(x,param[3],sqrt(param[5]))
lines(x,y*3*length(Y))
#dev.off()
flip1 <- c(1,1,1,1,1,0,1,1,1,1)
flip2 <- c(1,0,0,0,0,1,1,0,1,0)
flip3 <- c(1,1,0,0,1,1,0,0,1,1)
flip4 <- c(1,1,1,1,1,0,1,1,0,0)
flip5 <- c(0,0,0,0,1,0,0,0,1,0)
flips <- data.frame(rbind(flip1,flip2,flip3,flip4,flip5))
flips
coins <- c("A","B", "A", "A", "B")
heads <- (rowSums(flips)/10)*10
tails <- 10 - heads
hails
heads
coins
flips
heads
sum(heads[1,3,4])
theta.hatA <- sum(heads[c(1,3,4)])
sum(heads[c(1,3,4)])
theta.hatA <- sum(heads[c(1,3,4)])/30
theta.hatA
theta.hatB <- sum(heads[c(2,5)])/20
theta.hatB
new.thetaA <- old.thetaA <- 0.6
new.thetaB <- old.thetaB <- 0.5
funfunction <- function(theta, x, n){
out <- choose(n, x) * theta^x * (1 -theta)^(n-x)
return(out)
}
heads
funfunction(theta = new.thetaA, heads[1], n = 10)
funfunction(theta = new.thetaB, heads[1], n = 10)
try1A <- funfunction(theta = new.thetaA, heads[1], n = 10)
try1B <- funfunction(theta = new.thetaB, heads[1], n = 10)
try1A / (try1A + try1B)
try1B / (try1A + try1B)
weightB <- try1B / (try1A + try1B)
headsA <- weightA * heads[1]
weightA <- try1A / (try1A + try1B) #normalizing so sums to 1
weightB <- try1B / (try1A + try1B)
headsA <- weightA * heads[1]
weightA
headsA
tailsA <- weightA * tails[1]
headsA <- weightA * heads[1]
tailsA <- weightA * tails[1]
headsB <- weightB * heads[1]
tailsB <- weightB * tails[1]
heads
weightA
weightB
headsA
tailsA
headsB
tailsB
sum(headsA,tailsA,headsB,tailsB)
try1A <- funfunction(theta = new.thetaA, heads[1], n = 10)
try1B <- funfunction(theta = new.thetaB, heads[1], n = 10)
distribA <- try1A / (try1A + try1B) #normalizing so sums to 1
distribB <- try1B / (try1A + try1B)
headsA <- distribA * heads[1]
tailsA <- distribA * tails[1]
headsB <- distribB * heads[1]
tailsB <- distribB * tails[1]
funfunction(theta = new.thetaA, heads, n = 10)
tryA <- funfunction(theta = new.thetaA, heads, n = 10)
tryB <- funfunction(theta = new.thetaB, heads, n = 10)
tryA
tryB
distribA <- tryA / (tryA + tryB) #normalizing so sums to 1
distribB <- tryB / (tryA + tryB)
distribA
distribB
distribA[5] + distribB[5]
headsA <- distribA * heads
tailsA <- distribA * tails
headsB <- distribB * heads
tailsB <- distribB * tails
headsA
tailsA
sum(headsA + tailsA + headsB + tailsB)
sum(headsA[5] + tailsA[5] + headsB[5] + tailsB[5])
headsA
tailsB
new.thetaA <- headsA / (headsA + tailsA)
new.thetaA <- headsA / (headsA + tailsA)
new.thetaB <- headsB / (headsB + tailsB)
new.thetaA
new.thetaB
tryA <- funfunction(theta = new.thetaA, heads, n = 10)
tryB <- funfunction(theta = new.thetaB, heads, n = 10)
distribA <- tryA / (tryA + tryB) #normalizing so sums to 1
distribB <- tryB / (tryA + tryB)
distribA
distribB
new.thetaA <- old.thetaA <- 0.6
new.thetaB <- old.thetaB <- 0.5
funfunction <- function(theta, x, n){
out <- choose(n, x) * theta^x * (1 -theta)^(n-x)
return(out)
}
##
tryA <- funfunction(theta = new.thetaA, heads, n = 10)
tryB <- funfunction(theta = new.thetaB, heads, n = 10)
distribA <- tryA / (tryA + tryB) #normalizing so sums to 1
distribB <- tryB / (tryA + tryB)
distribA
distribB
headsA <- distribA * heads
tailsA <- distribA * tails
headsB <- distribB * heads
tailsB <- distribB * tails
new.thetaA <- headsA / (headsA + tailsA)
new.thetaB <- headsB / (headsB + tailsB)
new.thetaA
new.thetaB
headsA
headsB
headsA + headsB
headsA
headsA / (headsA + headsB)
headsA / (headsA + tailsA)
new.thetaA <- headsA / 10
new.thetaA <- old.thetaA <- 0.6
new.thetaB <- old.thetaB <- 0.5
tryA <- funfunction(theta = new.thetaA, heads, n = 10)
tryB <- funfunction(theta = new.thetaB, heads, n = 10)
distribA <- tryA / (tryA + tryB) #normalizing so sums to 1
distribB <- tryB / (tryA + tryB)
headsA <- distribA * heads
tailsA <- distribA * tails
headsB <- distribB * heads
tailsB <- distribB * tails
new.thetaA <- headsA / 10
new.thetaB <- headsB / 10
new.thetaA
new.thetaB
headsA
sum(headsA)
new.thetaA <- sum(headsA) / 50
new.thetaB <- sum(headsB) / 50
new.thetaA
new.thetaB
old.thetaA <- new.thetaA
new.thetaA <- sum(headsA) / (sum(headsA) + sum(headsB))
new.thetaA
new.thetaA <- sum(headsA) / (sum(headsA) + sum(tailsA))
new.thetaA <- old.thetaA <- 0.6
new.thetaB <- old.thetaB <- 0.5
funfunction <- function(theta, x, n){
out <- choose(n, x) * theta^x * (1 -theta)^(n-x)
return(out)
}
##
tryA <- funfunction(theta = new.thetaA, heads, n = 10)
tryB <- funfunction(theta = new.thetaB, heads, n = 10)
distribA <- tryA / (tryA + tryB) #normalizing so sums to 1
distribB <- tryB / (tryA + tryB)
headsA <- distribA * heads
tailsA <- distribA * tails
headsB <- distribB * heads
tailsB <- distribB * tails
old.thetaA <- new.thetaA
old.thetaB <- new.thetaB
new.thetaA <- sum(headsA) / (sum(headsA) + sum(tailsA))
new.thetaB <- sum(headsB) /  (sum(headsB) + sum(tailsB))
old.thetaA
new.thetaA
old.thetaB
new.thetaB
(sum(headsA) + sum(tailsA))
(sum(headsB) + sum(tailsB))
diffA <- abs(old.thetaA - new.thetaA)
diffB <- abs(old.thetaB - new.thetaB)
diffA
diffB
tryA <- funfunction(theta = new.thetaA, heads, n = 10)
tryB <- funfunction(theta = new.thetaB, heads, n = 10)
distribA <- tryA / (tryA + tryB) #normalizing so sums to 1
distribB <- tryB / (tryA + tryB)
headsA <- distribA * heads
tailsA <- distribA * tails
headsB <- distribB * heads
tailsB <- distribB * tails
old.thetaA <- new.thetaA
old.thetaB <- new.thetaB
new.thetaA <- sum(headsA) / (sum(headsA) + sum(tailsA))
new.thetaB <- sum(headsB) /  (sum(headsB) + sum(tailsB))
new.thetaA
new.thetaB
diffA <- abs(old.thetaA - new.thetaA)
diffB <- abs(old.thetaB - new.thetaB)
diffA
diffB
while(diffA > 0.001 | diffB > 0.001){
tryA <- funfunction(theta = new.thetaA, heads, n = 10)
tryB <- funfunction(theta = new.thetaB, heads, n = 10)
distribA <- tryA / (tryA + tryB) #normalizing so sums to 1
distribB <- tryB / (tryA + tryB)
headsA <- distribA * heads
tailsA <- distribA * tails
headsB <- distribB * heads
tailsB <- distribB * tails
old.thetaA <- new.thetaA
old.thetaB <- new.thetaB
new.thetaA <- sum(headsA) / (sum(headsA) + sum(tailsA))
new.thetaB <- sum(headsB) /  (sum(headsB) + sum(tailsB))
diffA <- abs(old.thetaA - new.thetaA)
diffB <- abs(old.thetaB - new.thetaB)
}
new.thetaA
new.thetaB
new.thetaA <- old.thetaA <- 0.6
new.thetaB <- old.thetaB <- 0.5
funfunction <- function(theta, x, n){
out <- choose(n, x) * theta^x * (1 -theta)^(n-x)
return(out)
}
tryA <- funfunction(theta = new.thetaA, heads, n = 10)
tryB <- funfunction(theta = new.thetaB, heads, n = 10)
distribA <- tryA / (tryA + tryB) #normalizing so sums to 1
distribB <- tryB / (tryA + tryB)
headsA <- distribA * heads
tailsA <- distribA * tails
headsB <- distribB * heads
tailsB <- distribB * tails
old.thetaA <- new.thetaA
old.thetaB <- new.thetaB
old.thetaA
new.thetaA
new.thetaA <- sum(headsA) / (sum(headsA) + sum(tailsA))
new.thetaB <- sum(headsB) /  (sum(headsB) + sum(tailsB))
new.thetaA
library(datasets)
library(ggplot2)
data(faithful)
head(faithful)
hist(faithful$waiting)
hist(faithful$eruptions)
plot(faithful)
?kmeans
k.out <- k.means(faithful, centers = 2)
k.out <- kmeans(faithful, centers = 2)
summary(k.out)
attributes(k.out)
table(k.out$cluster)
ggplot(data = faithful, aes(x = eruptions,
y = waiting,
color = k.out$cluster)) +
geom_point()
ggplot(data = faithful, aes(x = eruptions,
y = waiting,
color = factor(k.out$cluster))) +
geom_point()
library(mixtools)
?normalmixEM
hist(faithful$waiting)
fmm1 <- normalmixEM(faithful$waiting, lambda = 0.5,
mu = c(55, 89), sigma = 5)
summary(fmm1)
plot(fmm1, density = TRUE, cex.axis = 1.4, cex.lab = 1.4,
cex.main = 1.8, main2 = "Time between Old Faithful eruptions",
xlab2 = "Minutes")
plot(density(faithful$waiting))
fmm1 <- normalmixEM(faithful$waiting ~ faithful$eruptions, lambda = 0.5,
mu = c(55, 89), sigma = 5)
?normalmixEM
fmm1 <- normalmixEM(faithful$waiting, lambda = 0.5,
mu = c(55, 89), sigma = 5)
summary(fmm1)
plot(fmm1, density = TRUE, cex.axis = 1.4, cex.lab = 1.4,
cex.main = 1.8, main2 = "Time between Old Faithful eruptions",
xlab2 = "Minutes")
install.packages("VA",repos="http://r.iq.harvard.edu")
library(VA)
?
?VA
data("VAdata")
View(VAdata)
?verbal autoposy
??verbal
library(dplyr)
library(xtable)
library(MatchingFrontier)
data('lalonde')
mean(lalonde$re78[lalonde$treat == 1]) - mean(lalonde$re78[lalonde$treat == 0])
## or:
summary(lm(re78 ~ treat, data = lalonde))
se <- sqrt((var(lalonde$re78[lalonde$treat == 1])/table(lalonde$treat)[2]) +
(var(lalonde$re78[lalonde$treat == 0]/table(lalonde$treat)[1])))
se
fit <- lm(re78 ~ treat + age + education + black + hispanic + married + nodegree +
re74 + re75, data = lalonde)
summary(fit)
lalonde.names <- names(lalonde)[2:9]
createBalanceTable <- function(dataset){
## calc means,median,variance
lalonde.stats <- dataset %>%
select(age, education, black, hispanic, married, nodegree, re74, re75, treat) %>%
group_by(treat) %>%
summarize_each(funs(mean, median, var))
## put data in a table
tab1 <- cbind(t(lalonde.stats[,2:9]), t(lalonde.stats[,10:17]),
t(lalonde.stats[,18:25]))
## clean up row and column names
rownames(tab1) <- lalonde.names
colnames(tab1) <- c("mean_control", "mean_treat",
"median_control", "median_treat",
"var_control", "var_treat")
xtable(tab1, digits = 2)
}
createBalanceTable(lalonde)
pre.imbalance <- imbalance(group = lalonde$treat, data = lalonde, drop = c("treat", "re78"))
library(cem)
pre.imbalance <- imbalance(group = lalonde$treat, data = lalonde, drop = c("treat", "re78"))
pre.imbalance
getL1 <- function(group, dataset){
pre.imbalance <- imbalance(group = group, data = dataset,
drop = c("treat", "re78"))
return(pre.imbalance$L1)
}
getL1(lalonde$treat, lalonde)
library(ggplot2)
library(tidyr)
createDensityplots <- function(dataset){
plot.data <- subset(dataset, select = -c(re78))
plot.data <- gather(plot.data, "variable", "value", c(2:9))
p <- ggplot(data = plot.data, aes(x = value)) +
geom_density(aes(fill = as.factor(treat)), alpha = 0.4)
p <- p + facet_wrap( ~ variable, scales = "free")
p + scale_fill_brewer(palette = "Set1")
}
createDensityplots(lalonde)
library(MatchIt)
m.out.p12 <- matchit(treat ~ age + education + black + hispanic +
married + nodegree + re74 + re75, data = lalonde,
method = "nearest", distance = "logit", ratio = 2)
pscore.data12 <- match.data(m.out.p12)
summary(m.out.p12)
createBalanceTable(pscore.data12)
createBalanceTable(pscore.data)
createBalanceTable(pscore.data12)
head(pscore.data12)
lalonde %>%
select(age, education, black, hispanic, married, nodegree, re74, re75, treat) %>%
group_by(treat) %>%
summarize_each(funs(mean, median, var))
head(lalonde)
lalonde %>%
select(age, education, black, hispanic, married, nodegree, re74, re75, treat)
lalonde %>%
select(age)
library(dplyr)
lalonde %>%
select(age)
lalonde %>%
select("age")
library(downloader)
install.packages("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("msleep_ggplot2.csv")
head(msleep)
sleepData <- select(msleep, name, sleep_total)
head(sleepData)
head(msleep)
sleepData <- select(msleep, name, sleep_total)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("msleep_ggplot2.csv")
head(msleep)
sleepData <- select(msleep, name, sleep_total)
library(dplyr)
sleepData <- select(msleep, name, sleep_total)
msleep %>%
select(name)
dplyr::select(msleep, name)
library(MatchingFrontier)
data('lalonde')
mean(lalonde$re78[lalonde$treat == 1]) - mean(lalonde$re78[lalonde$treat == 0])
summary(lm(re78 ~ treat, data = lalonde))
se <- sqrt((var(lalonde$re78[lalonde$treat == 1])/table(lalonde$treat)[2]) +
(var(lalonde$re78[lalonde$treat == 0]/table(lalonde$treat)[1])))
se
fit <- lm(re78 ~ treat + age + education + black + hispanic + married + nodegree +
re74 + re75, data = lalonde)
summary(fit)
fit <- lm(re78 ~ treat + age + education + black + hispanic + married + nodegree +
re74 + re75, data = lalonde)
head(lalonde)
library(MatchingFrontier)
data('lalonde')
mean(lalonde$re78[lalonde$treat == 1]) - mean(lalonde$re78[lalonde$treat == 0])
## or:
summary(lm(re78 ~ treat, data = lalonde))
se <- sqrt((var(lalonde$re78[lalonde$treat == 1])/table(lalonde$treat)[2]) +
(var(lalonde$re78[lalonde$treat == 0]/table(lalonde$treat)[1])))
se
fit <- lm(re78 ~ treat + age + education + black + hispanic + married + nodegree +
re74 + re75, data = lalonde)
head(lalonde)
library(MatchIt)
data('lalonde')
head(lalonde)
data(RandomVA1)
library(InSilicoVA)
data(RandomVA1)
fit1a <- insilico(RandomVA1, Nsim = 10)
?"insilico"
fit1a <- insilico(RandomVA1, Nsim = 20, burnin = 10, thin = 1, seed = 1)
fit1a <- insilico(RandomVA1, Nsim = 20, burnin = 10, thin = 1, seed = 1,                  auto.length = FALSE)
fit1a <- insilico(RandomVA1, Nsim = 20, burnin = 10, thin = 1, seed = 1,                  subpop = FALSE)
sessionInfo()
install.packages("InSilicoVA")
install.packages("InSilicoVA")
library(InSilicoVA)
sessionInfo()
data(RandomVA1)
fit1a <- insilico(RandomVA1, Nsim = 20, burnin = 10, thin = 1, seed = 1)
fit1a <- insilico(RandomVA1, subpop = NULL,                  Nsim = 10, burnin = 10, thin = 1, seed = 1,                  auto.length = FALSE)
fit1a <- insilico(RandomVA1, Nsim = 20, burnin = 10, thin = 1, seed = 1,                  auto.length = FALSE)
fit1a <- insilico(RandomVA1, Nsim = 20, burnin = 10,                   thin = 1, seed = 1)
fit1a <- insilico(RandomVA1, Nsim = 20, burnin = 10, thin = 1, seed = 1, auto.length = FALSE)
fit1a <- insilico(RandomVA1, Nsim = 20, burnin = 10, thin = 1, seed = 1, auto.length = FALSE, subpop = NULL)
library(manymodels)
?manymodels
setwd("~/Documents/Personal-Packages/manymodels")
document()
## Install - go back up a level to parent directory
setwd("..")
install("manymodels")
library(roxygen2)
setwd("~/Documents/Personal-Packages/manymodels")
document()
library(devtools)
setwd("~/Documents/Personal-Packages/manymodels")
document()
setwd("..")
install("manymodels")
setwd("~/Documents/Personal-Packages/manymodels")
document()
setwd("..")
install("manymodels")
